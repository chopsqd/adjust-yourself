export default {
   title: "Асинхронное программирование",
   text: `
Рассмотрим одну из ключевых концепций JavaScript - асинхронное программирование, которое играет важную роль в создании реактивных и отзывчивых веб-приложений.
### Что такое асинхронное программирование?
Асинхронное программирование - это способ организации выполнения операций, при котором программа не блокируется при ожидании завершения какой-либо задачи. Вместо этого, выполнение переходит к следующим задачам, а когда асинхронная задача завершается, выполняется соответствующий обработчик.
### Механизмы асинхронного программирования в JavaScript
JavaScript предоставляет несколько механизмов для работы с асинхронным кодом:
1. **Callback функции**: Это функции, которые передаются в качестве аргументов другим функциям и вызываются по завершении асинхронной операции.
   \`\`\`jsx
   // Пример с использованием callback функции
   function fetchData(callback) {
     setTimeout(() => {
       callback("Данные получены!");
     }, 2000);
   }
   
   fetchData((data) => {
     console.log(data);
   });
   \`\`\`
2. **Промисы (Promises)**: Промисы - это объекты, представляющие результат асинхронной операции. Они обещают вернуть значение в будущем, либо выполнить ошибку, если что-то пошло не так.
   \`\`\`jsx
   // Пример с использованием промиса
   function fetchData() {
     return new Promise((resolve, reject) => {
       setTimeout(() => {
         resolve("Данные получены!");
       }, 2000);
     });
   }
   
   fetchData().then((data) => {
     console.log(data);
   });
   \`\`\`
3. **Async/await**: Это относительно новый способ работы с асинхронным кодом, предоставленный в ES2017 (ECMAScript 8). Он позволяет писать асинхронный код так, как если бы он был синхронным, что делает его более читаемым и понятным.
   \`\`\`jsx
   // Пример с использованием async/await
   async function fetchData() {
     return new Promise((resolve, reject) => {
       setTimeout(() => {
         resolve("Данные получены!");
       }, 2000);
     });
   }
   
   async function getData() {
     const data = await fetchData();
     console.log(data);
   }
   \`\`\`
### Заключение
Асинхронное программирование позволяет создавать быстрые и отзывчивые веб-приложения, которые могут эффективно обрабатывать большие объемы данных и взаимодействовать с сервером без блокировки интерфейса пользователя
    `,
   test: [
      {
         question: "Что представляет собой асинхронное программирование?",
         options: [
            {
               answer: "Способ организации выполнения операций, при котором программа блокируется при ожидании завершения задачи.",
               isCorrect: false
            },
            {
               answer: "Способ организации выполнения операций, при котором программа не блокируется при ожидании завершения задачи.",
               isCorrect: true
            },
            {
               answer: "Способ выполнения операций только в одном потоке.",
               isCorrect: false
            },
            {
               answer: "Способ выполнения операций в нескольких потоках одновременно.",
               isCorrect: false
            }
         ]
      },
      {
         question: "Какой из перечисленных механизмов НЕ используется для работы с асинхронным кодом в JavaScript?",
         options: [
            {
               answer: "Callback функции.",
               isCorrect: false
            },
            {
               answer: "Промисы (Promises).",
               isCorrect: false
            },
            {
               answer: "Async/await.",
               isCorrect: false
            },
            {
               answer: "Synchronous/await.",
               isCorrect: true
            }
         ]
      },
      {
         question: "Что представляют собой промисы (Promises) в JavaScript?",
         options: [
            {
               answer: "Объекты, представляющие результат асинхронной операции, которые обещают вернуть значение в будущем.",
               isCorrect: true
            },
            {
               answer: "Функции, которые передаются в качестве аргументов другим функциям.",
               isCorrect: false
            },
            {
               answer: "Способ организации выполнения операций в нескольких потоках одновременно.",
               isCorrect: false
            },
            {
               answer: "Промисы - это переменные, значения которых не должны изменяться.",
               isCorrect: false
            }
         ]
      },
      {
         question: "Какой из следующих примеров демонстрирует использование async/await в JavaScript?",
         options: [
            {
               answer: "Пример с использованием callback функции.",
               isCorrect: false
            },
            {
               answer: "Пример с использованием промиса.",
               isCorrect: false
            },
            {
               answer: "Пример с использованием промиса и then().",
               isCorrect: false
            },
            {
               answer: "Пример с использованием async/await.",
               isCorrect: true
            }
         ]
      },
      {
         question: "Какой принцип программирования позволяет JavaScript выполнять несколько задач одновременно?",
         options: [
            {
               answer: "Асинхронное программирование.",
               isCorrect: true
            },
            {
               answer: "Синхронное программирование.",
               isCorrect: false
            },
            {
               answer: "Параллельное программирование.",
               isCorrect: false
            },
            {
               answer: "Функциональное программирование.",
               isCorrect: false
            }
         ]
      }
   ]
}
