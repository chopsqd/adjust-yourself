export default {
   title: "Область видимости",
   text: `
В этой лекции мы рассмотрим понятие области видимости, которое играет важную роль в понимании того, как переменные доступны в различных частях вашего кода.
### Что такое область видимости?
Область видимости определяет, где в вашем коде доступны переменные. В JavaScript каждая функция создает свою собственную область видимости, и переменные, объявленные внутри функции, обычно не доступны за её пределами.
### Глобальная область видимости
Глобальная область видимости означает, что переменные доступны в любой части вашего кода. Переменные, объявленные за пределами всех функций, находятся в глобальной области видимости.
\`\`\`jsx
let globalVariable = "Я глобальная переменная";

function myFunction() {
   console.log(globalVariable); // Выведет: "Я глобальная переменная"
}

myFunction();
\`\`\`
### Локальная область видимости
Локальная область видимости означает, что переменные доступны только внутри определенной функции или блока кода. Переменные, объявленные внутри функции, находятся в её локальной области видимости и недоступны за пределами этой функции.
\`\`\`jsx
function myFunction() {
   let localVariable = "Я локальная переменная";
   console.log(localVariable); // Выведет: "Я локальная переменная"
}

myFunction();
console.log(localVariable); // Ошибка: localVariable is not defined
\`\`\`
### Понятие замыкания
Замыкание - это особенность JavaScript, которая позволяет функциям сохранять доступ к переменным из внешней области видимости, даже после завершения работы этой функции.
\`\`\`jsx
function outerFunction() {
   let outerVariable = "Я внешняя переменная";

   function innerFunction() {
       console.log(outerVariable); // Выведет: "Я внешняя переменная"
   }

   return innerFunction;
}

let closure = outerFunction();
closure();
\`\`\`
### Заключение
В этой лекции мы рассмотрели основы области видимости в JavaScript. Понимание области видимости поможет вам писать более чистый и понятный код, избегать конфликтов и создавать более эффективные программы. Продолжайте изучать эту важную концепцию и экспериментировать с ней в своем коде!
    `,
   test: [
      {
         question: "Что определяет область видимости переменных в JavaScript?",
         options: [
            {
               answer: "Количество комментариев в коде.",
               isCorrect: false
            },
            {
               answer: "Место объявления переменных в коде.",
               isCorrect: true
            },
            {
               answer: "Только названия переменных.",
               isCorrect: false
            },
            {
               answer: "Длина функций в коде.",
               isCorrect: false
            }
         ]
      },
      {
         question: "Что такое глобальная область видимости?",
         options: [
            {
               answer: "Переменные, доступные только внутри функции.",
               isCorrect: false
            },
            {
               answer: "Переменные, доступные в любой части кода.",
               isCorrect: true
            },
            {
               answer: "Область видимости, ограниченная областью одной функции.",
               isCorrect: false
            },
            {
               answer: "Специальная область видимости только для объектов.",
               isCorrect: false
            }
         ]
      },
      {
         question: "Какие переменные находятся в локальной области видимости?",
         options: [
            {
               answer: "Переменные, объявленные внутри функций.",
               isCorrect: true
            },
            {
               answer: "Переменные, объявленные вне функций.",
               isCorrect: false
            },
            {
               answer: "Переменные, доступные в любой части кода.",
               isCorrect: false
            },
            {
               answer: "Переменные, которые нельзя изменять.",
               isCorrect: false
            }
         ]
      },
      {
         question: "Что такое замыкание в JavaScript?",
         options: [
            {
               answer: "Специальная функция для закрытия других функций.",
               isCorrect: false
            },
            {
               answer: "Особенность, позволяющая функциям сохранять доступ к переменным из внешней области видимости.",
               isCorrect: true
            },
            {
               answer: "Функция, которая принимает только переменные типа 'замыкание'.",
               isCorrect: false
            },
            {
               answer: "Метод для создания переменных только в глобальной области видимости.",
               isCorrect: false
            }
         ]
      },
      {
         question: "Что произойдет при вызове функции, определенной внутри другой функции с использованием замыкания?",
         options: [
            {
               answer: "Функция будет доступна только внутри внешней функции, и нельзя будет вызвать её извне",
               isCorrect: false
            },
            {
               answer: "Функция будет доступна глобально и можно будет вызвать её из любого места кода",
               isCorrect: false
            },
            {
               answer: "Функция будет доступна только внутри внешней функции, но её можно будет вызвать извне, используя специальные методы",
               isCorrect: false
            },
            {
               answer: "Функция будет доступна внутри и за пределами внешней функции благодаря замыканию",
               isCorrect: true
            }
         ]
      }
   ]
}
